# -*- coding: utf-8 -*-
"""Proyek Predictive Analytics

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vW5JyZXIQJomFyVG-lKELYLXKK60Zwkg

# Import Modul
Pada bagian ini kita akan mengimport semua modul yang akan digunakan dalam proyek kali ini
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import kagglehub
from sklearn.preprocessing import  OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, BatchNormalization

"""# Data Loading
Pada bagian ini kita akan mengunduh dataset dari kaggle secara langsung, pada proyek kali ini kita menggunakan dataset penyakit jantung

"""

!kaggle datasets download fedesoriano/heart-failure-prediction
!unzip heart-failure-prediction.zip -d heart-failure-prediction

"""Dataset yang telah didowload akan dipanggil dan diubah ke bentuk DataFrame dengan bantuan library pandas"""

df=pd.read_csv('/content/heart-failure-prediction/heart.csv')
df.head()

"""# EDA
Exploratory data analysis atau sering disingkat EDA merupakan proses investigasi awal pada data untuk menganalisis karakteristik, menemukan pola, anomali, dan memeriksa asumsi pada data.
"""

df.info()

"""Menampilkan deskripsi statistik dari DataFrame"""

df.describe()

"""Mengecek DataFrame apakah memiliki data yang terduplikasi"""

# Cek data duplicated
df.duplicated().sum()

"""Mengecek DataFrame apakah memiliki data yang kosong"""

# Cek missing value
df.isnull().sum()

"""Mengecek outlier dari kolom 'Age' dari DataFrame"""

# Cek outlier untuk kolom numerik
sns.boxplot(x=df['Age'])

"""Mengecek outlier dari kolom 'RestingBP' dari DataFrame


"""

sns.boxplot(x=df['RestingBP'])

"""Mengecek outlier dari kolom 'Cholesterol' dari DataFrame"""

sns.boxplot(x=df['Cholesterol'])

"""Mengecek outlier dari kolom 'MaxHR' dari DataFrame"""

sns.boxplot(x=df['MaxHR'])

"""Mengecek outlier dari kolom 'Oldpeak' dari DataFrame"""

sns.boxplot(x=df['Oldpeak'])

"""Membuat diagram batang untuk melihat distribusi data pada DataFrame"""

# Melihat sebaran data
df.hist(bins=50, figsize=(20,15))
plt.show()

"""# Data Preparation
Pada Tahap ini kita akan mempersiapkan (preparation) dataset yang telah didefinikan pada tahap sebelumnya. tahap di mana kita melakukan proses transformasi pada data sehingga menjadi bentuk yang cocok untuk proses pemodelan. Ada beberapa tahapan yang umum dilakukan pada data preparation, antara lain, seleksi fitur, transformasi data, feature engineering, dan dimensionality reduction.
"""

df.info()

"""Proses selanjutnya adalag Encoding fitur katagori. Hal ini berguna pada proses modeling data karena model tidak dapat membaca data non numerik"""

df = pd.concat([df, pd.get_dummies(df['Sex'],
                                   prefix='Sex',
                                   dtype=int)],axis=1)
df = pd.concat([df, pd.get_dummies(df['ChestPainType'],
                                   prefix='ChestPainType',
                                   dtype=int)],axis=1)
df = pd.concat([df, pd.get_dummies(df['RestingECG'],
                                   prefix='RestingECG',
                                   dtype=int)],axis=1)
df = pd.concat([df, pd.get_dummies(df['ExerciseAngina'],
                                   prefix='ExerciseAngina',
                                   dtype=int)],axis=1)
df = pd.concat([df, pd.get_dummies(df['ST_Slope'],
                                   prefix='ST_Slope',
                                   dtype=int)],axis=1)
df.drop(['Sex',
         'ChestPainType',
         'RestingECG',
         'ExerciseAngina',
         'ST_Slope'], axis=1, inplace=True)
df.head()

"""Melihat tipe data dan jumlah pada DataFrame setelah proses encoding"""

df.info()

"""Proses selanjutnya adalah Standarisasi, yaitu proses transformasi data sehinggal memiliki nilai mean = 0 dan standar deviasi = 1"""

scaler = StandardScaler()
df[['Age', 'RestingBP', 'Cholesterol', 'MaxHR', 'Oldpeak']] = scaler.fit_transform(df[['Age', 'RestingBP', 'Cholesterol', 'MaxHR', 'Oldpeak']])
df.head()

"""Selanjutnya DataFrame di bagi menjadi Test dan Train Set untuk proses pada training data pada model"""

x = df.drop('HeartDisease', axis=1)
y = df['HeartDisease']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 77)

"""Cek jumlah data yang berada pada test dan train set"""

print(f'Total # of sample in whole dataset: {len(x)}')
print(f'Total # of sample in train dataset: {len(x_train)}')
print(f'Total # of sample in test dataset: {len(x_test)}')

"""# Modeling - ANN
Modeling adalah tahapan di mana kita menggunakan algoritma machine learning untuk menjawab problem statement dari tahap business understanding.
"""

# Menggunakan Deep Learning (Nweron Networ)
model= Sequential([
    Dense(64, activation='relu', input_shape=(x_train.shape[1],)),
    BatchNormalization(),
    Dropout(0.3),
    Dense(64, activation='relu'),
    BatchNormalization(),
    Dropout(0.3),
    Dense(1, activation='sigmoid')
])
model.summary()

"""Menetukan optimizer, loss, dan metrics pada proses training. Setelah itu model di training selama 100 epochs"""

optimizer = keras.optimizers.Adam(learning_rate=0.0005)
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

history=model.fit(x_train,
          y_train,
          epochs=100,
          batch_size=32,
          validation_data=(x_test, y_test))

"""Melihat grafik accuracy dan validation accuracy setelah proses training selesai"""

train_acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
epochs_range = range(1, len(train_acc) + 1)

# Plot akurasi
plt.figure(figsize=(8, 5))
plt.plot(epochs_range, train_acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Training & Validation Accuracy')
plt.legend()
plt.grid(True)
plt.show()

"""# Evaluasi Model - ANN

Evaluasi model pada metrik Accuracy
"""

loss, accuracy = model.evaluate(x_test, y_test)
print(f"Test Accuracy: {accuracy*100:.2f}%")

"""Evaluasi model pada metrik recall, F1-Score, dan Precision"""

# Evaluasi recall, F1-Score, dan Precision
y_pred_prob = model.predict(x_test)
y_pred_classes = (y_pred_prob > 0.5).astype(int)
print(classification_report(y_test, y_pred_classes))

"""# Modeling - Logistic Regression

Menggunakan model machine learning (Logistic Regression) untuk memastikan model terbaik
"""

model = LogisticRegression()
model.fit(x_train, y_train)

"""# Evaluasi Model - Logistic Regression
Cek akurasi model Logistic Regression dengan beberapa metrik
"""

y_pred = model.predict(x_test)
print("Akurasi Model:", accuracy_score(y_test, y_pred))
print("Laporan Klasifikasi:\n", classification_report(y_test, y_pred))